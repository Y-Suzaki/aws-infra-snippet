# stack間のリソース参照を行っているため、先に「base-vpc.yaml」のstackを作成しておく必要がある。
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  Env:
    Type: String
    Default: dev
  LaunchType:
    Type: String
    Default: EC2
    AllowedValues:
    - Fargate
    - EC2
Conditions:
  EC2: !Equals [ !Ref LaunchType, "EC2" ]
Resources:
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: "*.ys-dev-web.tk"
      ValidationMethod: DNS

  SecurityGroupALB:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-alb
      SecurityGroupIngress:
      - CidrIp: "0.0.0.0/0"
        IpProtocol: "TCP"
        FromPort: 443
        ToPort: 443
      VpcId: { "Fn::ImportValue": !Join [ "-", [ "kaonashi", "backend", "vpc" , Ref: "Env" ] ] }

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - { "Fn::ImportValue": !Join [ "-", [ "kaonashi", "public", "subnet" ,"a" , Ref: "Env" ] ] }
        - { "Fn::ImportValue": !Join [ "-", [ "kaonashi", "public", "subnet" ,"b" , Ref: "Env" ] ] }
      SecurityGroups:
      - !Ref SecurityGroupALB

  Route53Record:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: ys-dev-web.tk.
      RecordSets:
        - Name: api.ys-dev-web.tk
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
            DNSName: !GetAtt LoadBalancer.DNSName

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref Certificate
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref TargetGroupBlue

  TargetGroupBlue:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      VpcId: { "Fn::ImportValue": !Join [ "-", [ "kaonashi", "backend", "vpc" , Ref: "Env" ] ] }
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: !If [ EC2, "instance", "ip" ]
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 30

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1
      Conditions:
      - Field: path-pattern
        Values:
        - /
      Actions:
      - TargetGroupArn: !Ref TargetGroupBlue
        Type: forward

# 他Stackから参照するリソースは、Exportを定義しておくこと
Outputs:
  SecurityGroupALB:
    Value: !Ref SecurityGroupALB
    Export:
      Name: !Join [ "-", [ "ys", "dev", "web", "sg", "alb", "Ref":"Env"  ] ]
  TargetGroupBlue:
    Value: !Ref TargetGroupBlue
    Export:
      Name: !Join [ "-", [ "ys", "dev", "web", "target", "blue", "Ref":"Env"  ] ]
  LoadBalancer:
    Value: !Ref LoadBalancer
    Export:
      Name: !Join [ "-", [ "ys", "dev", "web", "alb", "Ref":"Env"  ] ]
  LoadBalancerName:
    Value: !GetAtt LoadBalancer.LoadBalancerName
    Export:
      Name: !Join [ "-", [ "ys", "dev", "web", "alb", "name", "Ref":"Env"  ] ]
  LoadBalancerFullName:
    Value: !GetAtt LoadBalancer.LoadBalancerFullName
    Export:
      Name: !Join [ "-", [ "ys", "dev", "web", "alb", "full", "name", "Ref":"Env"  ] ]
