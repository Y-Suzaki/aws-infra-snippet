AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'A serverless application that replicate all objects in S3 bucket to Google Cloud Storage.'

Globals:
  Function:
    Runtime: python3.6
    Timeout: 300
    MemorySize: 256

Resources:
  HTTPResponseFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: Production
      CodeUri: ./src
      Handler: app.main
      FunctionName: HTTPAccess
      Role: 
        Fn::GetAtt:
          - SampleLambdaRole
          - Arn

  HTTPResponseFunctionAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref HTTPResponseFunction
      FunctionVersion: !Ref HTTPResponseFunction.Version
      Name: v100

  HTTPResponsePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref HTTPResponseFunction
      Principal: apigateway.amazonaws.com
 
  HTTPResponseAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: "2.0"
        info:
          title: awssam-apigateway
        schemes:
          - https
        paths:
          /http:
            get:
              summary: "top page"
              description: "http response [top page html]"
              produces:
              - "application/json"
              x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                  uri:
                    Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HTTPResponseFunction.Arn}/invocations
                  passthroughBehavior: "when_no_match"
                  httpMethod: "GET"
                  type: "aws_proxy"
  SampleLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
