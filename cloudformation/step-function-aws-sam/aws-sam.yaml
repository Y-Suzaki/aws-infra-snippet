AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Serverless application.

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: lambda_logs_policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: logs:CreateLogGroup
              Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*
            - Effect: Allow
              Action:
                - dynamodb:Update*
              Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/LogType
            - Effect: Allow
              Action:
                - lambda:ListAliases
              Resource:
                - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*
            - Effect: Allow
              Action:
                - cloudformation:*
              Resource:
                - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/data-lake-s3-*/*
                - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/data-lake-kinesis-*/*
                - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/data-lake-kinesis-trigger-*/*

  DeployStackLambda:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: latest
      CodeUri: lambda
      FunctionName: dala-lake-control-deploy-stack
      Handler: deploy-stack.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Timeout: 600

  DeployStackLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${DeployStackLambda}
      RetentionInDays: 7

  UpdateDynamoDBLambda:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: latest
      CodeUri: lambda
      FunctionName: dala-lake-control-update-status
      Handler: update_dynamodb.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Timeout: 600

  UpdateDynamoDBLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${UpdateDynamoDBLambda}
      RetentionInDays: 7

  GetLatestVersionLambda:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: latest
      CodeUri: lambda
      FunctionName: dala-lake-control-get-latest-lambda
      Handler: get_latest_version.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Timeout: 600

  GetLatestVersionLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetLatestVersionLambda}
      RetentionInDays: 7

  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: [
                  !GetAtt [ DeployStackLambda, Arn ],
                  !GetAtt [ UpdateDynamoDBLambda, Arn ],
                  !GetAtt [ GetLatestVersionLambda, Arn ]
                ]

  StepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "StartAt": "GetLatestVersionState",
              "States": {
                "GetLatestVersionState": {
                  "Type": "Task",
                  "Resource": "${GetLatestVersionLambdaArn}",
                  "InputPath": "$",
                  "Parameters": {
                    "uri.$": "$.uri",
                    "lambda_name": "kinesis-test-read"
                  },
                  "OutputPath": "$",
                  "Next": "DeployStackS3State",
                  "Catch": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "Next": "UpdateDynamoDBErrorState"
                    }
                  ]
                },
                "DeployStackS3State": {
                  "Type": "Task",
                  "Resource": "${DeployStackLambdaArn}",
                  "InputPath": "$",
                  "Parameters": {
                    "uri.$": "$.uri",
                    "stack_name": "s3-stack",
                    "template_name": "s3-template.yml"
                  },
                  "OutputPath": "$",
                  "Next": "DeployStackKinesisState",
                  "Catch": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "Next": "UpdateDynamoDBErrorState"
                    }
                  ]
                },
                "DeployStackKinesisState": {
                  "Type": "Task",
                  "Resource": "${DeployStackLambdaArn}",
                  "InputPath": "$",
                  "Parameters": {
                    "uri.$": "$.uri",
                    "stack_name": "kinesis-stack",
                    "template_name": "kinesis-template.yml"
                  },
                  "OutputPath": "$",
                  "Next": "DeployStackKinesisTriggerState",
                  "Catch": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "Next": "UpdateDynamoDBErrorState"
                    }
                  ]
                },
                "DeployStackKinesisTriggerState": {
                  "Type": "Task",
                  "Resource": "${DeployStackLambdaArn}",
                  "InputPath": "$",
                  "Parameters": {
                    "uri.$": "$.uri",
                    "stack_name": "kinesis-trigger-stack",
                    "template_name": "kinesis-trigger-template.yml"
                  },
                  "OutputPath": "$",
                  "Next": "UpdateDynamoDBSuccessState",
                  "Catch": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "Next": "UpdateDynamoDBErrorState"
                    }
                  ]
                },
                "UpdateDynamoDBSuccessState": {
                  "Type": "Task",
                  "Resource": "${UpdateDynamoDBLambdaArn}",
                  "InputPath": "$",
                  "Parameters": {
                    "uri.$": "$.uri",
                    "status": "working"
                  },
                  "End": true
                },
                "UpdateDynamoDBErrorState": {
                  "Type": "Task",
                  "Resource": "${UpdateDynamoDBLambdaArn}",
                  "InputPath": "$",
                  "Parameters": {
                    "uri.$": "$.uri",
                    "status": "error"
                  },
                  "End": true
                }
              }
            }
          - {
              DeployStackLambdaArn: !GetAtt [ DeployStackLambda, Arn ],
              UpdateDynamoDBLambdaArn: !GetAtt [ UpdateDynamoDBLambda, Arn ],
              GetLatestVersionLambdaArn: !GetAtt [ GetLatestVersionLambda, Arn ]
            }
      RoleArn: !GetAtt [StepFunctionRole, Arn]
      StateMachineName: data-lake-control-create-log-type
Outputs:
  StepFunction:
    Description: StepFunction
    Value: !Ref StepFunction
  GetLatestVersionLambda:
    Description: GetLatestVersionLambda
    Value: !GetAtt [ GetLatestVersionLambda, Arn ]
    Export:
      Name: data-lake-control-lambda-arn-get-latest-version
